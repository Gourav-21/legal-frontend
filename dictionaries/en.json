{
  "navigation": {
    "home": "Home",
    "pricing": "Pricing",
    "reports": "My Reports",
    "about": "About Us",
    "contact": "Contact Us",
    "login": "Login",
    "logout": "Logout",
    "upgrade": "Upgrade to Pro"
  },
  "languageSwitcher": {
    "english": "English",
    "hebrew": "Hebrew"
  },
  "hero": {
    "title": "Welcome to Paynalyze.<br />Payroll Analysis Made Simple",
    "subtitle": "Easily upload, analyze, and review your payroll reports.",
    "uploadTitle": "Upload Your Payslip & Employment Contract",
    "uploadSubtitle": "Submit your documents for expert payroll analysis. No need to enter personal details!",
    "payslipUploadTitle": "Payslip Upload",
    "payslipUploadText": "Drop your file here, or browse (PDF, DOCX, TIF, PNG, JPG)",
    "contractUploadTitle": "Employment Contract Upload",
    "contractUploadText": "Drop your file here, or browse (PDF, DOCX, TIF, PNG, JPG)",
    "attendanceUploadTitle": "Attendance reports Upload",
    "attendanceUploadText": "Drop your file here, or browse (Excel, XLSX)",
    "uploadButton": "Upload File",
    "actionButtons": {
      "createReport": "Create a report",
      "createCompanyPage": "Create a company page",
      "documentHistory": "Document history",
      "prepareClaim": "Preparing a claim",
      "checkProfitability": "Check profitability",
      "createWarningLetter": "Create a warning letter",
      "professionalOpinion": "Professional Opinion & Calculations",
      "predictSuccess": "Predicting success",
      "finalClaimReport": "Final Claim Report & Tables",
      "identifySerialEmployer": "Serial employer identification",
      "easyExplanation": "Easy Explanation",
      "employerReport": "Employer Report",
      "violationsList": "List of Violations",
      "violationsTable": "Table of Violations",
      "exportToExcel": "Export to Excel"
    },
    "sharing": {
      "title": "Send Reports via:",
      "whatsapp": "Send via WhatsApp",
      "email": "Send via Email",
      "findLawyer": "Find Your Lawyer"
    }
  },
  "howItWorks": {
    "title": "How <span class=\"text-yellow\">Paynalyze</span> Works.",
    "subtitle": "Easy Payroll Compliance in 3 Steps",
    "steps": [
      {
        "title": "Upload Your Payslip",
        "description": "Scan and submit your payroll document."
      },
      {
        "title": "AI Legal Analysis",
        "description": "Instantly detect violations and check compliance."
      },
      {
        "title": "Get Your Report",
        "description": "Download a detailed PDF with findings and legal references."
      }
    ]
  },
  "whyUs": {
    "title": "Empowering <br />Fair Payroll Practices",
    "description": "At Paynalyze, we are committed to protecting employees' rights by ensuring they receive fair and lawful compensation. Our AI-powered platform helps you easily verify payroll compliance, detect violations, and access legal insights—all in simple language.",
    "withoutTitle": "Without Paynalyze",
    "withoutItems": [
      {
        "title": "Manual Verification",
        "description": "Time-consuming and prone to errors."
      },
      {
        "title": "Legal Complexity",
        "description": "Hard-to-understand legal jargon."
      },
      {
        "title": "Limited Knowledge",
        "description": "No access to legal precedents or relevant rulings."
      },
      {
        "title": "No Clear Proof",
        "description": "Lack of formal documentation to support claims."
      }
    ],
    "withTitle": "With Paynalyze",
    "withItems": [
      {
        "title": "Accurate Payroll Analysis",
        "description": "Instantly detect underpayments and legal violations."
      },
      {
        "title": "Simple Legal Explanations",
        "description": "Understand complex laws in plain language."
      },
      {
        "title": "Court Precedents",
        "description": "View relevant legal rulings for similar cases."
      },
      {
        "title": "Downloadable Reports",
        "description": "Get detailed PDF reports with legal references."
      }
    ]
  },
  "pricingCta": {
    "title": "Choose Your Plan Unlock Full Payroll Protection",
    "subtitle": "Get detailed reports, legal insights, and full compliance verification.",
    "button": "Upgrade to Pro"
  },
  "footer": {
    "copyright": "© <a href=\"/en\" class=\"text-dark\">paynalyze.com</a> 2025 <span class=\"text-muted px-1\">|</span> All Rights Reserved.",
    "links": "<a href=\"/en/privacy\" class=\"text-dark\">Privacy Policy</a> <span class=\"text-muted px-1\">|</span> <a href=\"/en/cookies\" class=\"text-dark\">Cookies Policy</a>"
  },
  "submitModal": {
    "title": "Submitted Successfully!",
    "text": "Our legal experts and AI system are analyzing your data.<br /> You'll receive a detailed report soon.",
    "button": "Go to My Reports",
    "statusText": "You can check the status in your Reports section."
  },
  "contact": {
    "title": "Do you have questions?",
    "subtitle": "Get in Touch With Us",
    "description": "Fill out the form below and let us know how we can help.",
    "supportText": "We're here to assist you with anything — from product support to partnership inquiries.",
    "email": "support@paynalyze.com",
    "form": {
      "title": "Contact Us",
      "subtitle": "Simply complete the form below and we will get in touch with you shortly.",
      "name": "Your Name",
      "email": "Email",
      "phone": "Phone",
      "message": "How Can We Help?",
      "submit": "Send Message",
      "placeholders": {
        "name": "Enter your name",
        "email": "Enter your email",
        "phone": "Enter your phone",
        "message": "Enter your message here"
      }
    }
  },
  "about": {
    "title": "Empowering Pay Transparency for Everyone",
    "description": "We believe knowledge is power—and your paycheck shouldn't be a mystery. Paynalyze is built to help employees uncover the truth about their wages using cutting-edge AI and labor law intelligence.",
    "stats": [
      {
        "value": "25,000+",
        "text": "Payslips Analyzed"
      },
      {
        "value": "1,200+",
        "text": "Labor Law Violations Detected"
      },
      {
        "value": "100%",
        "text": "Confidential & Secure"
      },
      {
        "value": "24×5",
        "text": "Dedicated Legal & Tech Support"
      }
    ],
    "whatWeDo": {
      "title": "What We Do and Why We Do It",
      "description": [
        "At Paynalyze, we help workers discover if they're being fairly compensated - by scanning payslips and employment contracts, analyzing the data, and providing easy-to-understand legal reports.",
        "Our journey began with a simple idea: too many workers are unaware of their rights. What started as a passion project grew into a mission to bring clarity, transparency, and fairness to workplaces everywhere."
      ]
    },
    "mission": {
      "title": "Our Mission",
      "description": "To give every worker the tools to understand, question, and take control of their pay—because justice begins with transparency.",
      "coreValues": [
        {
          "title": "Transparency",
          "description": "We believe truth builds trust.",
          "icon": "Transparency.svg"
        },
        {
          "title": "Empowerment",
          "description": "Knowledge should be accessible to all.",
          "icon": "Empowerment.svg"
        },
        {
          "title": "Fairness",
          "description": "Every paycheck deserves a second look.",
          "icon": "Fairness.svg"
        },
        {
          "title": "Innovation",
          "description": "We harness AI to simplify complex legal insights.",
          "icon": "Innovation.svg"
        }
      ]
    }
  },
  "pricing": {
    "title": "Choose the Right Plan for You",
    "subtitle": "Get accurate payroll analysis and legal insights with flexible pricing options.",
    "monthly": "Monthly",
    "annually": "Annually",
    "discountOffer": "10% off, all credits upfront",
    "freePlan": {
      "title": "Free Plan",
      "price": "$0",
      "period": "month",
      "description": "1 Free Payslip Analysis",
      "subDescription": "No personal details required.",
      "buttonText": "Activated",
      "features": [
        "Basic legal insights",
        "PDF report download",
        "No court precedents",
        "No priority support"
      ]
    },
    "basicPlan": {
      "title": "Basic Plan",
      "badge": "Popular",
      "price": "$9.99",
      "period": "month",
      "description": "5 Payslip",
      "subDescription": "Analyses per month",
      "buttonText": "Upgrade to Basic",
      "features": [
        "Legal explanations in simple language",
        "PDF reports with legal references",
        "No court precedents",
        "No priority support"
      ]
    },
    "proPlan": {
      "title": "Pro Plan",
      "price": "$19.99",
      "period": "month",
      "description": "Unlimited Payslip",
      "subDescription": "& Contract Analyses",
      "buttonText": "Upgrade to Pro",
      "features": [
        "Detailed legal explanations",
        "Court precedents for violations",
        "Downloadable PDF reports",
        "Priority customer support"
      ]
    }
  },
  "reports": {
    "title": "My Reports",
    "subtitle": "View and download your previous payroll analyses.",
    "filter": {
      "byDate": "By Date",
      "dateOptions": {
        "last30Days": "Last 30 Days",
        "last7Days": "Last 7 Days",
        "today": "Today"
      },
      "byType": "By Type",
      "typeOptions": {
        "all": "All",
        "payslip": "Payslip",
        "contract": "Contract",
        "legalScenario": "Legal Scenario"
      },
      "byResult": "By Legal Result",
      "resultOptions": {
        "all": "All",
        "compliant": "Compliant",
        "nonCompliant": "Non-compliant"
      }
    },
    "table": {
      "date": "Date",
      "type": "Type",
      "status": "Status",
      "actions": "Actions",
      "viewButton": "View",
      "downloadButton": "Download",
      "noReports": "No reports available"
    },
    "downloadAll": {
      "button": "Download All Reports",
      "text": "Get a ZIP file with all your previous payroll reports."
    }
  },
  "signin": {
    "leftBannerTitle": "Smarter Payroll,<br> Legal Precision.",
    "leftBannerImageAlt": "Login Registration Illustration",
    "title": "Log in to <span class=\"text-primary\">Paynalyze</span> first.",
    "subtitle": "Access your payroll insights instantly.",
    "emailPlaceholder": "Enter your email",
    "emailLabel": "Email",
    "passwordPlaceholder": "Enter your password",
    "passwordLabel": "Password",
    "rememberMe": "Remember Me",
    "forgotPassword": "Forgot Password?",
    "signInButton": "Sign In",
    "orDivider": "OR",
    "googleButton": "Google",
    "googleImageAlt": "Google logo",
    "facebookButton": "Facebook",
    "facebookImageAlt": "Facebook logo",
    "appleButton": "Apple",
    "appleImageAlt": "Apple logo",
    "noAccount": "Don't have a Paynalyze account?",
    "signUpLink": "Sign Up"
  },
  "auth": {
    "authenticationRequired": "Authentication Required",
    "loginRequiredMessage": "You need to log in to access the admin panel and manage labor law rules.",
    "goToLogin": "Go to Login"
  },
  "signup": {
    "leftBannerTitle": "Smarter Payroll,<br> Legal Precision.",
    "rightFormTitle": "Create your <span class=\"text-primary\">Paynalyze</span> account.<br> Get started for free.",
    "rightFormSubtitle": "Get started with smarter payroll analysis.",
    "namePlaceholder": "Enter your name",
    "nameLabel": "Name",
    "emailPlaceholder": "Enter your email",
    "emailLabel": "Email",
    "phonePlaceholder": "Enter your phone",
    "phoneLabel": "Phone",
    "passwordPlaceholder": "Set a password",
    "passwordLabel": "Password",
    "reEnterPasswordPlaceholder": "Re-enter password",
    "reEnterPasswordLabel": "Re-enter",
    "termsCheckboxLabel": "I agree to the <a href=\"#\">Terms of Service</a> and <a href=\"#\">Privacy Policy</a>.",
    "freeSignUpButton": "Free Sign Up",
    "orDivider": "OR",
    "googleButton": "Google",
    "facebookButton": "Facebook",
    "appleButton": "Apple",
    "signInPrompt": "Already have an Paynalyze account?",
    "signInLink": "Sign In"
  },
  "subscribe": {
    "title": "Subscribe to <span class=\"text-yellow\">Paynalyze Basic Plan</span> Subscription",
    "price": "$9.99",
    "period": "/ month",
    "planDetails": {
      "title": "Basic Plan Subscription",
      "billing": "Billed monthly",
      "price": "$9.99"
    },
    "subtotal": {
      "title": "Subtotal",
      "taxInfo": "Tax",
      "price": "$9.99",
      "taxAmount": "$3"
    },
    "totalDue": {
      "title": "Total due today",
      "price": "$12.99"
    },
    "paymentMethodTitle": "Choose Your <br />Payment Method.",
    "cardInfoLabel": "Card information",
    "cardPlaceholder": "1234   1234   1234   1234",
    "expiryPlaceholder": "MM / YY",
    "cvvPlaceholder": "CVV",
    "cardholderNameLabel": "Cardholder name",
    "cardholderNamePlaceholder": "Full name on card",
    "countryLabel": "Country",
    "countryDefault": "USA",
    "countryOptionUSA": "USA",
    "countryOptionIsrael": "Israel",
    "addressPlaceholder": "Address",
    "saveInfoCheckboxLabel": "Securely save my information for 1-click checkout",
    "saveInfoCheckboxSubtext": "Pay faster on Paynalyze and everywhere Link is accepted.",
    "subscribeButton": "Subscribe",
    "termsText": "By confirming your subscription, you allow us to charge your card for this and future payments in accordance with terms. You can always cancel your subscription"
  },
  "lawyerModal": {
    "title": "Choose Your Expert Labor Lawyer",
    "lawyers": [
      {
        "name": "David Levi",
        "location": "Tel Aviv, Israel",
        "experience": "17 years of experience in labor law",
        "rating": "4.9 | 120+ client reviews",
        "specialtiesTitle": "Specialties",
        "specialties": [
          "Wage disputes",
          "Wrongful termination",
          "Severance pay claims"
        ],
        "contactButton": "Contact Now"
      },
      {
        "name": "Amir Shalev",
        "location": "Jerusalem, Israel",
        "experience": "12 years of experience in labor law",
        "rating": "4.8 | 100+ client reviews",
        "specialtiesTitle": "Specialties",
        "specialties": [
          "Employment contracts",
          "Unpaid overtime disputes",
          "Labor court representation"
        ],
        "contactButton": "Contact Now"
      },
      {
        "name": "Michal Barak",
        "location": "Ramat Gan, Israel",
        "experience": "11 years of experience in labor law",
        "rating": "4.8 | 90+ client reviews",
        "specialtiesTitle": "Specialties",
        "specialties": [
          "Minimum wage violations",
          "Employee benefits disputes",
          "Unfair dismissal cases"
        ],
        "contactButton": "Contact Now"
      },
      {
        "name": "Eitan Moyal",
        "location": "Be'er Sheva, Israel",
        "experience": "20 years of experience in labor law",
        "rating": "4.7 | 95+ client reviews",
        "specialtiesTitle": "Specialties",
        "specialties": [
          "Union disputes",
          "Workplace harassment cases",
          "Retaliation claims"
        ],
        "contactButton": "Contact Now"
      }
    ]
  },
  "law": {
    "title": "Labor Law Management",
    "subtitle": "View, add, edit, and delete labor laws in our system",
    "databaseTitle": "Labor Law Database",
    "databaseSubtitle": "Manage all your labor laws in one place",
    "newLawPlaceholder": "Enter the labor law text...",
    "addButton": "Add New Law",
    "addingButton": "Adding...",
    "loading": "Loading...",
    "loadingLaws": "Loading laws...",
    "noLaws": "No labor laws found. Add your first law above.",
    "lawTextHeader": "Law Text",
    "actionsHeader": "Actions",
    "saveTip": "Save changes",
    "saveButton": "Save",
    "cancelTip": "Cancel editing",
    "cancelButton": "Cancel",
    "editTip": "Edit this law",
    "editButton": "Edit",
    "deleteTip": "Delete this law",
    "deleteButton": "Delete",
    "confirmDelete": "Are you sure you want to delete this law?",
    "errors": {
      "fetchFailed": "Error fetching laws",
      "genericFetch": "Failed to fetch laws",
      "addFailed": "Error adding law",
      "genericAdd": "Failed to add law",
      "deleteFailed": "Error deleting law",
      "genericDelete": "Failed to delete law",
      "updateFailed": "Error updating law",
      "genericUpdate": "Failed to update law"
    }
  },
  "summaryModal": {
    "title": "Summary",
    "loading": "Loading summary...",
    "error": "Error",
    "couldNotLoadSummary": "Could not load summary, but the full analysis is available.",
    "noAnalysisAvailable": "No analysis available to summarize."
  },
  "fileAnalysis": {
    "showAiSummary": "Show AI Summary",
    "askQuestion": "Ask Question",
    "processButton": "Process Documents",
    "contextPlaceholder": "Enter additional context for document analysis...",
    "compressingFiles": "Compressing Files...",
    "processingDocs": "Processing Docs...",
    "docsProcessed": "Docs Processed",
    "editOcrResults": "Edit OCR Results with Live Preview",
    "editOcrSubtext": "Professional markdown editor with tables, formatting, and real-time preview",
    "docsProcessedAlert": "Documents processed successfully! You can now review and edit the extracted text with live markdown preview before creating reports.",
    "loginRequired": "Please log in to process documents.",
    "uploadRequired": "Please upload at least one payslip, contract, or attendance file.",
    "fileSizeExceeded": "Total file size exceeds 100MB. Please upload smaller files or fewer files.",
    "waitForCompression": "Please wait until all files are completely compressed before processing documents.",
    "loginRequiredExport": "Please log in to export to Excel.",
    "loginRequiredReport": "Please log in to create a report."
  },
  "questionModal": {
    "title": "Ask a Question",
    "placeholder": "Type your question about the analysis...",
    "submitButton": "Submit Question",
    "loading": "Processing your question...",
    "error": "Error processing question",
    "noAnalysisError": "Please process documents first before asking questions."
  },
  "ocrEditorModal": {
    "title": "Edit OCR Results",
    "subtitle": "Edit the extracted text from your documents using the markdown editor with live preview. Changes will be used when creating reports.",
    "payslipText": "Payslip Text:",
    "contractText": "Contract Text:",
    "attendanceText": "Attendance Text:",
    "undoButton": "Undo",
    "aiFixButton": "AI Fix",
    "fixingButton": "Fixing...",
    "charactersCount": "characters",
    "noOcrText": "No OCR text available to edit.",
    "cancelButton": "Cancel",
    "saveChangesButton": "Save Changes"
  },
  "aiSuggestionHelp": {
    "title": "AI Suggestion and Explanation",
    "subtitle": "Get AI-powered suggestions for parameters and formulas",
    "descriptionLabel": "Describe your rule requirement",
    "descriptionPlaceholder": "Describe the labor law requirement or rule you need parameters and formulas for...",
    "loading": "Getting AI Suggestion...",
    "getSuggestion": "Get AI Suggestion",
    "aiResponse": "AI Response"
  },
  "admin": {
    "page": {
      "title": "Admin Dashboard",
      "subtitle": "Manage labor law rules and system settings",
      "laborLawRulesManagement": "Labor Law Rules Management",
      "createUpdateDeleteRules": "Create, update, and delete labor law rules"
    },
    "rulesManagement": {
      "laborLawRulesManagement": "⚖️ Labor Law Rules Management",
      "addNewRule": "Add New Rule",
      "viewEditRules": "📋 View & Edit Rules",
      "quickExpressionTester": "🧪 Quick Expression Tester",
      "manageDynamicParameters": "🔧 Manage Dynamic Parameters",
      "noLaborLawRulesFound": "No labor law rules found. Create your first rule using the button above.",
      "name": "Name",
      "lawReference": "Law Reference",
      "effectivePeriod": "Effective Period",
      "checks": "Checks",
      "actions": "Actions",
      "edit": "Edit",
      "delete": "Delete",
      "ongoing": "Ongoing",
      "amountOwed": "Amount Owed:",
      "notSet": "Not set",
      "ruleId": "Rule ID",
      "ruleName": "Rule Name*",
  "lawReferenceLabel": "Law Reference",
      "description": "Description*",
      "whatThisRuleChecksFor": "What this rule checks for",
      "effectiveFrom": "Effective From*",
      "effectiveTo": "Effective To",
      "yyyyMmDdOrLeaveBlank": "YYYY-MM-DD or leave blank",
      "ruleIdAutoGenerated": "Rule ID will be automatically generated when you save the rule.",
      "availableFunctions": "Available Functions:",
      "availableVariables": "Available Variables:",
      "testExpressionInTab2": "🧪 Test Expression in Tab 2",
      "conditionExpression": "🔍 Condition Expression",
      "calculationExpression": "🧮 Calculation Expression",
      "conditionExample": "e.g., attendance.overtime_hours > 0",
      "calculationExample": "e.g., (contract.hourly_rate * 1.25 - payslip.overtime_rate) * min(attendance.overtime_hours, 2)",
      "addEditCheck": "Add/Edit Check",
      "condition": "Condition",
      "amountOwedFormula": "Amount Owed Formula",
      "amountOwedExample": "e.g., (contract.hourly_rate * 1.25 - payslip.overtime_rate) * min(attendance.overtime_hours, 2)",
      "violationMessage": "Violation Message",
      "violationExample": "e.g., Overtime rate violation",
      "addCheck": "Add Check",
      "updateRule": "Update Rule",
      "createRule": "Create Rule",
      "testRule": "Test Rule",
      "testRuleWithCurrentData": "Test Rule with Current Data",
      "testResults": "Test Results",
      "noTestResultsYet": "No test results yet. Test a rule to see results here.",
      "violationDetected": "Violation Detected",
      "noViolation": "No Violation",
      "amountOwedValue": "Amount Owed: {amount}",
      "testData": "Test Data",
      "payslipData": "Payslip Data",
      "contractData": "Contract Data",
      "attendanceData": "Attendance Data",
      "employeeInformation": "Employee Information",
      "dataSections": "Data Sections",
      "payslipDetails": "Payslip Details",
      "contractDetails": "Contract Details",
      "attendanceDetails": "Attendance Details",
      "loadSampleData": "Load Sample Data",
      "clearTestResults": "Clear Test Results",
      "validation": {
        "descriptionIsRequiredForAIGeneration": "Please provide a description to generate AI checks",
        "aiGenerationFailed": "Unable to generate AI checks. Please try again or create them manually",
        "unexpectedAIResponse": "Received an unexpected response from AI. Please try again",
        "ruleNameIsRequired": "Please enter a name for this rule",
        "lawReferenceIsRequired": "Please specify which law this rule references",
        "descriptionIsRequired": "Please provide a description of what this rule checks",
        "effectiveFromDateIsRequired": "Please select when this rule becomes effective",
        "effectiveToMustBeAfterEffectiveFrom": "The end date must be after the start date",
        "ruleIdFormatInvalid": "Rule ID can only contain uppercase letters (A-Z), numbers (0-9), and underscores (_)",
        "ruleIdRequiredWhenEditing": "A Rule ID is required when editing an existing rule",
        "atLeastOneCheckIsRequired": "Please add at least one check for this rule",
        "conditionIsRequired": "Please enter a condition for this check",
        "amountOwedFormulaIsRequired": "Please specify how to calculate the amount owed",
        "violationMessageIsRequired": "Please describe what violation this check detects",
        "invalidCheckData": "The check data is invalid. Please review and correct it",
        "ruleIdAlreadyExists": "This Rule ID is already in use. Please choose a different ID"
      },
      "messages": {
        "ruleCreatedSuccessfully": "Rule created successfully",
        "ruleUpdatedSuccessfully": "Rule updated successfully",
        "ruleDeletedSuccessfully": "Rule deleted successfully",
        "failedToCreateRule": "Unable to create the rule. Please check your inputs and try again",
        "failedToUpdateRule": "Unable to update the rule. Please check your inputs and try again",
        "failedToDeleteRule": "Unable to delete the rule. Please try again",
        "failedToLoadRules": "Unable to load rules. Please refresh the page",
        "errorAddingRule": "Error while adding the rule",
        "failedToAddRule": "Unable to add the rule. Please check your inputs and try again",
        "addAtLeastOneRuleCheck": "Please add at least one rule check before testing",
        "addAtLeastOneCheckToTest": "Add at least one check to test the rule",
        "authenticationRequired": "Authentication Required",
        "loginRequiredMessage": "You need to log in to access the admin panel and manage labor law rules.",
        "goToLogin": "Go to Login"
      },
      "expandedRow": {
        "basicInformation": "Basic Information",
        "id": "ID:",
        "name": "Name:",
        "lawReference": "Law Reference:",
        "description": "Description:",
        "effectivePeriod": "Effective Period:",
        "checksAndPenalties": "Checks & Penalties",
        "violation": "Violation:",
        "condition": "Condition:",
        "amountOwed": "Amount Owed:",
        "noChecksDefined": "No checks defined",
        "penaltyCalculation": "Penalty Calculation:",
        "hideTest": "Hide Test",
        "testRule": "Test Rule",
        "testRuleTitle": "Test Rule:",
        "notAvailable": "N/A",
        "unnamedRule": "Unnamed Rule",
        "ongoing": "Ongoing",
        "created": "Created:",
        "lastUpdated": "Last Updated:"
      }
    },
    "ruleForm": {
      "editTitle": "✏️ Edit Rule",
      "createTitle": "➕ Create New Labor Law Rule",
      "cancel": "Cancel",
      "ruleId": "Rule ID",
      "autoGenerated": "(Auto-generated)",
      "ruleIdPlaceholder": "e.g., OVERTIME_125",
      "autoGeneratedHelp": "Rule ID will be automatically generated when you save the rule.",
      "ruleName": "Rule Name",
      "ruleNamePlaceholder": "e.g., First 2 hours overtime at 125%",
      "lawReference": "Law Reference",
      "lawReferencePlaceholder": "e.g., Section 16A",
      "description": "Description",
      "descriptionPlaceholder": "What this rule checks for",
      "effectiveFrom": "Effective From",
      "effectiveTo": "Effective To",
      "effectiveToPlaceholder": "YYYY-MM-DD or leave blank",
      "availableFunctions": "Available Functions:",
      "payslipParameters": "Payslip Parameters",
      "attendanceParameters": "Attendance Parameters",
      "contractParameters": "Contract Parameters",
  "employeeParameters": "Employee Parameters",
      "testExpressionButton": "🧪 Test Expression in Tab 2",
      "ruleChecks": "Rule Checks",
      "currentChecks": "Current Checks",
      "checkNumber": "Check",
      "noViolationMessage": "No violation message",
      "removeCheck": "Remove Check",
      "condition": "Condition:",
      "notSet": "Not set",
      "amountOwed": "Amount Owed:",
      "addNewCheck": "Add New Check",
      "editingCheck": "Editing Check",
      "editingRule": "Editing Rule",
      "saveCheck": "Save Check",
      "conditionLabel": "Condition",
      "conditionPlaceholder": "e.g., attendance.overtime_hours > 0",
      "conditionHelp": "e.g., attendance.overtime_hours > 0",
      "amountOwedFormula": "Amount Owed Formula",
      "amountOwedPlaceholder": "(contract.hourly_rate * 1.25 - payslip.overtime_rate) * min(attendance.overtime_hours, 2)",
      "amountOwedHelp": "e.g., (contract.hourly_rate * 1.25 - payslip.overtime_rate) * min(attendance.overtime_hours, 2)",
      "violationMessage": "Violation Message",
      "violationMessagePlaceholder": "e.g., Overtime rate violation for first 2 hours",
      "violationMessageHelp": "Message displayed when this check fails",
      "testRule": "Test Rule",
      "generating": "Generating...",
      "generateAiChecks": "Generate AI rule checks",
      "addCheck": "Add Check",
      "update": "Update Rule",
      "create": "Create Rule",
      "testRuleTitle": "Test Rule (Manual Entry)"
    },
    "dynamicParameters": {
      "currentDynamicParameters": "📊 Current Dynamic Parameters",
      "payslipParameters": "💰 Payslip Parameters",
      "attendanceParameters": "⏰ Attendance Parameters",
      "contractParameters": "📋 Contract Parameters",
  "employeeParameters": "👤 Employee Parameters",
      "required": "Required",
      "en": "EN:",
      "he": "HE:",
      "description": "Description:",
      "addParameter": "➕ Add Parameter",
      "section": "Section",
      "payslip": "💰 Payslip",
      "attendance": "⏰ Attendance",
      "contract": "📋 Contract",
  "employee": "👤 Employee",
      "parameterNameSnakeCase": "Parameter Name (snake_case)",
      "egBonusAmount": "e.g., bonus_amount",
      "useLowercaseWithUnderscoresNoSpaces": "Use lowercase with underscores, no spaces",
      "parameterLabelEnglish": "Parameter Label (English)",
      "egBonusAmountShekel": "e.g., Bonus Amount (₪)",
      "englishLabelForTheUI": "English label for the UI",
      "parameterLabelHebrew": "Parameter Label (Hebrew)",
      "egBonusAmountHebrew": "e.g., סכום בונוס (₪)",
      "hebrewLabelForTheUI": "Hebrew label for the UI",
      "parameterDescription": "Description",
      "egEmployeeBonus": "e.g., Employee bonus for the month",
      "descriptionOfTheParameter": "Description of the parameter",
      "type": "Type",
      "typeDescription": "Data type for the parameter (number or text)",
      "number": "Number",
      "text": "Text",
      "adding": "Adding...",
      "addParameterButton": "Add Parameter",
      "updateParameter": "✏️ Update Parameter",
      "parameterToUpdate": "Parameter to Update",
      "selectParameter": "Select parameter...",
      "onlyDynamicParametersCanBeUpdated": "Only dynamic parameters can be updated",
      "labelEnglish": "Label (English)",
      "labelHebrew": "Label (Hebrew)",
      "updating": "Updating...",
      "updateParameterButton": "Update Parameter",
      "clear": "Clear",
      "removeParameter": "🗑️ Remove Parameter",
      "parameterToRemove": "Parameter to Remove",
      "removing": "Removing...",
      "removeParameterButton": "Remove Parameter",
      "manageParameters": "⚙️ Manage Parameters",
      "addNewParameter": "➕ Add New Parameter",
      "removeParameterTitle": "➖ Remove Parameter",
      "updateParameterTitle": "✏️ Update Parameter",
      "operationMessages": {
        "parameterAddedSuccessfully": "Parameter added successfully",
        "parameterUpdatedSuccessfully": "Parameter updated successfully",
        "parameterRemovedSuccessfully": "Parameter removed successfully",
        "failedToAddParameter": "Failed to add parameter",
        "failedToUpdateParameter": "Failed to update parameter",
        "failedToRemoveParameter": "Failed to remove parameter"
      }
    },
    "testExpression": {
      "quickExpressionTester": "🧪 Quick Expression Tester",
      "expressionType": "Expression Type",
      "condition": "Condition",
      "calculation": "Calculation",
      "conditionExpression": "🔍 Condition Expression",
      "calculationExpression": "🧮 Calculation Expression",
      "conditionExample": "e.g., attendance.overtime_hours > 0",
      "calculationExample": "e.g., (contract.hourly_rate * 1.25 - payslip.overtime_rate) * min(attendance.overtime_hours, 2)",
      "useVariablesLike": "Use variables like:",
      "quickExamples": "Quick Examples:",
      "useExample": "Use Example",
      "evaluating": "Evaluating...",
      "evaluateExpression": "Evaluate Expression",
      "clear": "Clear",
      "evaluationResult": "Evaluation Result",
      "error": "Error:",
      "result": "Result:",
      "true": "✅ True",
      "false": "❌ False",
      "details": "Details:",
      "testDataConfiguration": "⚙️ Test Data Configuration",
      "sampleDataLoaded": "Sample data loaded! You can modify the values above if needed.",
      "chooseInputMethod": "Choose Your Input Method",
      "manualEntry": "Manual Entry",
      "jsonUpload": "JSON Upload",
      "sampleData": "Sample Data",
  "employeeInformation": "Employee Information",
  "employeeData": "Employee Data",
  "employeeDetails": "Employee Details",
      "dataSections": "Data Sections",
      "payslipData": "Payslip Data",
      "contractData": "Contract Data",
      "attendanceData": "Attendance Data",
      "payslipDetails": "Payslip Details",
      "contractDetails": "Contract Details",
      "attendanceDetails": "Attendance Details",
      "testRule": "Test Rule"
    },
    "testResults": {
      "loading": "Loading...",
      "runningTests": "Running tests...",
      "noTestResultsAvailable": "No test results available. Run a test to see results here.",
      "testError": "Test Error:",
      "testResultsFor": "Test Results:",
      "violationsFound": "Violations Found",
      "totalAmountOwed": "Total Amount Owed",
      "checkResults": "Check Results",
      "violation": "VIOLATION",
      "noViolation": "NO VIOLATION",
      "error": "ERROR",
      "violationLabel": "Violation:",
      "amountOwedLabel": "Amount Owed:",
      "conditionError": "Condition Error:",
      "amountError": "Amount Error:",
      "missingFields": "Missing Fields:",
      "viewTestContextData": "View Test Context Data",
      "checkId": "Check ID:"
    }
  },
  "manualEntryModal": {
    "title": "Manual Entry",
    "employee": "Employee",
    "employeeId": "Employee ID",
    "payslips": "Payslips",
    "attendance": "Attendance",
    "contract": "Contract",
    "month": "Month",
    "add": "Add",
    "cancel": "Cancel",
    "submitEntry": "Submit Entry",
    "validation": {
      "missingMonth": "All entries must have a month.",
      "attendanceWithoutPayslip": "Attendance exists but no payslip for that month.",
      "contractWithoutPayslip": "Contract data exists but no payslip data."
    }
  },
  "laborLawHelp": {
    "title": "Understanding Labor Law Calculations",
    "laborLawComplianceGuides": "Labor Law Compliance Guides",
    "tabs": {
      "overtimePay": "Overtime Pay",
      "minimumWage": "Minimum Wage",
      "vacationPay": "Vacation Pay"
    },
    "steps": {
      "step1": "Step 1: Understand the Law Requirement",
      "step2": "Step 2: What Data Do We Need?",
      "step3": "Step 3: Available Functions & Examples",
      "step4": "Step 4: Building the Rule",
      "step5": "Step 5: Building the Rule",
      "step6": "Step 6: Real Example with Numbers",
      "step7": "Step 7: Complete Rule Setup"
    },
    "overtimePay": {
      "lawTitle": "Overtime Pay Law (Israel)",
      "lawDescription": "In simple terms: If an employee works 11 hours in a day, they get:",
      "lawDetails": [
        "Regular time: Hours 1-9 per day = 100% of hourly rate",
        "First overtime tier: Hours 10-11 (first 2 overtime hours) = 125% of hourly rate",
        "Second overtime tier: Hour 12+ (beyond 2 overtime hours) = 150% of hourly rate"
      ],
      "dataNeeded": {
        "contractData": "Contract Data",
        "attendanceData": "Attendance Data",
        "payslipData": "Payslip Data"
      },
      "functions": {
        "min": "min(a, b) - Smaller Value",
        "max": "max(a, b) - Larger Value",
        "abs": "abs(number) - Absolute Value",
        "round": "round(number) - Round to Whole Number"
      }
    },
    "minimumWage": {
      "lawTitle": "Minimum Wage Law (Israel)",
      "lawDescription": "In simple terms: Every employee must earn at least the minimum wage for every hour worked, regardless of their contract rate.",
      "lawDetails": [
        "Adult workers (18+): Must be paid at least ₪30.70 per hour",
        "Youth workers (16-18): Must be paid at least ₪21.49 per hour (70% of adult minimum)",
        "Apprentices: Must be paid at least ₪24.56 per hour (80% of adult minimum) during training",
        "Overtime: Additional premiums apply on top of minimum wage"
      ],
      "dataNeeded": {
        "employeeData": "Employee Data",
        "attendanceData": "Attendance Data",
        "payslipData": "Payslip Data"
      }
    },
    "vacationPay": {
      "lawTitle": "Vacation Pay Law (Israel)",
      "lawDescription": "In simple terms: When employees take vacation, they must be paid their regular daily rate for each vacation day taken.",
      "lawDetails": [
        "Years 1-4: 14 vacation days per year",
        "Years 5-9: 16 vacation days per year",
        "Years 10-14: 18 vacation days per year",
        "Years 15-19: 20 vacation days per year",
        "Years 20+: 22 vacation days per year"
      ],
      "dataNeeded": {
        "serviceData": "Service Data",
        "vacationData": "Vacation Data",
        "payData": "Pay Data"
      }
    },
    "common": {
      "availableFunctions": "Available Functions:",
      "functionTips": "Function Tips:",
      "keyTakeaways": "Key Takeaways:",
      "important": "Important:",
      "purpose": "Purpose:",
      "example": "Example:",
      "condition": "Condition:",
      "amountOwed": "Amount Owed:",
      "violationMessage": "Violation Message:",
      "ruleName": "Rule Name:",
      "lawReference": "Law Reference:",
      "description": "Description:",
      "effectiveDates": "Effective Dates:",
      "translation": "Translation:",
      "howFormulaWorks": "How the formula works:",
      "whatWeWantToCheck": "What we want to check:",
      "completeCalculation": "Complete Calculation:",
      "employeeScenario": "Employee Scenario:",
      "problem": "Problem:",
      "result": "Result:",
      "totalAmountOwed": "TOTAL AMOUNT OWED:",
      "createRules": "Create Rules:",
      "createTwoSeparateRules": "Create Two Separate Rules:",
      "createRulesForDifferentPeriods": "Create Rules for Different Service Periods:",
      "smallerValue": "Smaller Value",
      "largerValue": "Larger Value",
      "absoluteValue": "Absolute Value",
      "roundToWholeNumber": "Round to Whole Number",
      "returnsSmallerOfTwoValues": "Returns the smaller of two values. Perfect for \"capping\" calculations.",
      "returnsLargerOfTwoValues": "Returns the larger of two values. Useful for minimum guarantees.",
      "returnsAbsoluteValue": "Returns the absolute value (removes negative sign). Useful for differences.",
      "roundsToNearestWholeNumber": "Rounds to the nearest whole number. Useful for final calculations.",
      "overtimeCap": "Overtime Cap",
      "maximumDeduction": "Maximum Deduction",
      "employeeWorked": "Employee worked",
      "returns": "returns",
      "firstHoursOnly": "first 2 hours only",
      "actualHours": "actual hours",
      "deductions": "Deductions",
      "maxAllowed": "Max allowed",
      "minimumGuarantee": "Minimum Guarantee",
      "bonusCalculation": "Bonus Calculation",
      "bonus": "Bonus",
      "guaranteedMinimum": "Guaranteed minimum",
      "actualBonus": "Actual bonus",
      "difference": "Difference",
      "salaryDifference": "Salary Difference",
      "currentSalary": "Current salary",
      "previousSalary": "Previous salary",
      "finalCalculation": "Final Calculation",
      "hoursWorked": "Hours worked",
      "hourlyRate": "Hourly rate",
      "roundsTo": "Rounds to",
      "useMinForCaps": "Use min() for caps and limits",
      "useMaxForGuarantees": "Use max() for minimum guarantees",
      "useAbsForDifferences": "Use abs() for differences and comparisons",
      "useRoundForFinal": "Use round() for final display values",
      "functionsArePowerful": "These functions are powerful for complex calculations",
      "combineFunctions": "You can combine functions: min(max(value, 0), 100)",
      "alwaysTest": "Always test your formulas with real data",
      "buildingTheRule": "Building the Rule",
      "employeeWorkedOvertime": "Employee worked overtime hours",
      "theyWerePaidCorrectly": "They were paid the correct overtime rate (125%)",
      "attendanceOvertimeHoursGreaterThanZero": "attendance.overtime_hours > 0",
      "amountOwedFormula": "Amount Owed Formula:",
      "contractHourlyRateTimes125MinusPayslipOvertimeRateTimesMinAttendanceOvertimeHours2": "(contract.hourly_rate * 1.25 - payslip.overtime_rate) * min(attendance.overtime_hours, 2)",
      "overtimeRateViolation": "Overtime rate violation for first 2 hours",
      "calculateCorrectRate": "Calculate correct rate: hourly_rate × 1.25",
      "subtractActualRate": "Subtract actual rate paid",
      "multiplyByHours": "Multiply by hours (capped at 2)",
      "resultIsAmountOwed": "Result is amount owed to employee",
      "realExampleWithNumbers": "Real Example with Numbers",
      "contractHourlyRate": "Contract hourly rate: ₪50",
      "overtimeHoursWorked": "Overtime hours worked: 3",
      "actualOvertimeRatePaid": "Actual overtime rate paid: ₪55",
      "shouldBePaid": "Should be paid: ₪50 × 1.25 = ₪62.50 per hour",
      "actuallyPaid": "Actually paid: ₪55 per hour",
      "underpaidBy": "Underpaid by: ₪7.50 per hour",
      "correctRate": "Correct rate: ₪50 × 1.25 = ₪62.50",
      "actualRate": "actual rate",
      "differencePerHour": "Difference per hour: ₪62.50 - ₪55 = ₪7.50",
      "hoursToCalculate": "Hours to calculate: min(3, 2) = 2",
      "rule1First2Hours": "Rule 1: First 2 hours at 125%",
      "rule2AdditionalHours": "Rule 2: Additional hours at 150%",
      "rule1Years1to4": "Rule 1: Years 1-4 (14 days)",
      "rule2Years5to9": "Rule 2: Years 5-9 (16 days)",
      "rule3Years10to14": "Rule 3: Years 10-14 (18 days)",
      "rule4Years15to19": "Rule 4: Years 15-19 (20 days)",
      "rule5Years20Plus": "Rule 5: Years 20+ (22 days)",
      "returnsLargerOfTwoValuesExtended": "Returns the larger of two values. Great for ensuring minimums or handling negative numbers.",
      "extraOvertimeHours": "Extra Overtime Hours",
      "minimumWageGuarantee": "Minimum Wage Guarantee",
      "worked": "Worked",
      "extraHours": "extra hours",
      "noExtra": "no extra",
      "paid": "Paid",
      "minimumWage": "minimum wage",
      "returnsAbsoluteValueExtended": "Returns the absolute value (removes negative sign). Useful for differences and comparisons.",
      "roundsToNearestWholeNumberExtended": "Rounds to the nearest whole number. Useful for final calculations and display.",
      "salaryDifferenceExample": "Salary Difference",
      "currentSalaryExample": "Current salary",
      "previousSalaryExample": "Previous salary",
      "differenceExample": "Difference",
      "finalCalculationExample": "Final Calculation",
      "hoursWorkedExample": "Hours worked",
      "hourlyRateExample": "Hourly rate",
      "roundsToExample": "Rounds to",
      "first2OvertimeHours125": "First 2 Overtime Hours (125%)",
      "additionalOvertimeHours150": "Additional Overtime Hours (150%)",
      "adultMinimumWage": "Adult Minimum Wage",
      "youthMinimumWage": "Youth Minimum Wage",
      "basicVacationPay": "Basic Vacation Pay",
      "didEmployeeGetPaid": "Did the employee get paid at least 125% of their regular hourly rate for the first 2 overtime hours?",
      "didEmployeeGetPaid150": "Did the employee get paid at least 150% of their regular hourly rate for additional overtime hours?",
      "didEmployeeGetMinimumWage": "Did the employee get paid at least the minimum wage for every hour worked?",
      "didEmployeeGetVacationPay": "Did the employee get paid their regular daily rate for vacation days taken?",
      "conditionWhenToCheck": "Condition (When to check):",
      "formulaWhatToCalculate": "Formula (What to calculate):",
      "violationMessageWhatToShow": "Violation Message (What to show):",
      "part1": "Part 1:",
      "part2": "Part 2:",
      "part3": "Part 3:",
      "final": "Final:",
      "whatTheyShouldGetPaid": "What they SHOULD get paid:",
      "regularRateTimes150": "Regular rate × 150% = Required overtime rate for additional hours",
      "differenceBetweenRequired": "Difference between required pay and actual pay = Amount short per additional hour",
      "hoursToPayAt150": "Hours to pay at 150% rate: Only hours beyond the first 2, or 0 if no extra hours",
      "totalAmountOwedForAdditional": "Total amount owed for additional overtime",
      "contractHourlyRateTimes125": "contract.hourly_rate * 1.25",
      "differenceBetweenRequired125": "Difference between required pay and actual pay = Amount short per hour",
      "hoursToPayAt125": "Hours to pay at 125% rate: Only first 2 hours, or actual hours if less",
      "totalAmountOwedForFirst2": "Total amount owed for first 2 overtime hours",
      "contractHourlyRateTimes150": "contract.hourly_rate * 1.50",
      "differenceBetweenRequired150": "Difference between required pay and actual pay = Amount short per additional hour",
      "hoursToPayAt150Rate": "Hours to pay at 150% rate: Only hours beyond the first 2, or 0 if no extra hours",
      "totalAmountOwedForAdditionalOvertime": "Total amount owed for additional overtime",
      "contractHourlyRateMinusPayslipRate": "contract.hourly_rate - payslip.overtime_rate",
      "attendanceRegularHours": "attendance.regular_hours",
      "totalAmountOwedForRegularHours": "Total amount owed for regular hours",
      "contractDailyRateMinusPayslipDailyRate": "contract.daily_rate - payslip.daily_rate",
      "attendanceVacationDays": "attendance.vacation_days",
      "totalAmountOwedForVacationDays": "Total amount owed for vacation days",
      "underpaidOvertimePremium": "Underpaid overtime premium for first 2 hours",
      "underpaidOvertimePremiumAdditional": "Underpaid overtime premium for additional hours",
      "underpaidMinimumWageAdult": "Underpaid minimum wage for adult worker",
      "underpaidMinimumWageYouth": "Underpaid minimum wage for youth worker",
      "underpaidVacationPayYears1to4": "Underpaid vacation pay for years 1-4",
      "underpaidVacationPayYears5to9": "Underpaid vacation pay for years 5-9",
      "actualOvertimeRatePaid55": "Actual overtime rate paid: ₪55",
      "shouldBePaid50Times125": "Should be paid: ₪50 × 1.25 = ₪62.50 per hour",
      "actuallyPaid55PerHour": "Actually paid: ₪55 per hour",
      "underpaidBy750PerHour": "Underpaid by: ₪7.50 per hour",
      "correctRate50Times125": "Correct rate: ₪50 × 1.25 = ₪62.50",
      "actualRate55": "Actual rate: ₪55",
      "differencePerHour750": "Difference per hour: ₪62.50 - ₪55 = ₪7.50",
      "hoursToCalculateMin32": "Hours to calculate: min(3, 2) = 2",
      "totalAmountOwed750Times2": "TOTAL AMOUNT OWED: ₪7.50 × 2 = ₪15.00",
      "contractHourlyRate40": "Contract hourly rate: ₪40",
      "overtimeHoursWorked5": "Overtime hours worked: 5",
      "actualOvertimeRatePaid50": "Actual overtime rate paid: ₪50",
      "shouldBePaid40Times150": "Should be paid: ₪40 × 1.50 = ₪60.00 per hour",
      "actuallyPaid50PerHour": "Actually paid: ₪50 per hour",
      "underpaidBy10PerHour": "Underpaid by: ₪10.00 per hour",
      "correctRate40Times150": "Correct rate: ₪40 × 1.50 = ₪60.00",
      "actualRate50": "Actual rate: ₪50",
      "differencePerHour10": "Difference per hour: ₪60.00 - ₪50 = ₪10.00",
      "hoursToCalculateMax52": "Hours to calculate: max(5-2, 0) = 3",
      "totalAmountOwed10Times3": "TOTAL AMOUNT OWED: ₪10.00 × 3 = ₪30.00",
      "contractHourlyRate25": "Contract hourly rate: ₪25",
      "regularHoursWorked8": "Regular hours worked: 8",
      "actualHourlyRatePaid18": "Actual hourly rate paid: ₪18",
      "minimumWageRequired30": "Minimum wage required: ₪30.70",
      "shouldBePaidAtLeast30": "Should be paid at least: ₪30.70 per hour",
      "actuallyPaid18PerHour": "Actually paid: ₪18 per hour",
      "underpaidBy1270PerHour": "Underpaid by: ₪12.70 per hour",
      "correctRate3070": "Correct rate: ₪30.70",
      "actualRate18": "Actual rate: ₪18",
      "differencePerHour1270": "Difference per hour: ₪30.70 - ₪18 = ₪12.70",
      "hoursToCalculate8": "Hours to calculate: 8",
      "totalAmountOwed1270Times8": "TOTAL AMOUNT OWED: ₪12.70 × 8 = ₪101.60",
      "contractDailyRate500": "Contract daily rate: ₪500",
      "vacationDaysTaken2": "Vacation days taken: 2",
      "actualDailyRatePaid400": "Actual daily rate paid: ₪400",
      "shouldBePaid500PerDay": "Should be paid: ₪500 per day",
      "actuallyPaid400PerDay": "Actually paid: ₪400 per day",
      "underpaidBy100PerDay": "Underpaid by: ₪100 per day",
      "correctRate500": "Correct rate: ₪500",
      "actualRate400": "Actual rate: ₪400",
      "differencePerDay100": "Difference per day: ₪500 - ₪400 = ₪100",
      "daysToCalculate2": "Days to calculate: 2",
      "totalAmountOwed100Times2": "TOTAL AMOUNT OWED: ₪100 × 2 = ₪200.00",
      "didEmployeeGetPaid150Extended": "Did the employee get paid at least 150% of their regular hourly rate for overtime hours beyond the first 2?",
      "didEmployeeGetMinimumWageExtended": "Did the employee get paid at least the minimum wage for every hour worked?",
      "didEmployeeGetVacationPayExtended": "Did the employee get paid their regular daily rate for vacation days taken?",
      "regularRateTimes150Extended": "Regular rate × 150% = Required overtime rate for additional hours",
      "differenceBetweenRequired150Extended": "Difference between required pay and actual pay = Amount short per additional hour",
      "hoursToPayAt150Extended": "Hours to pay at 150% rate: Only hours beyond the first 2, or 0 if no extra hours",
      "totalAmountOwedForAdditionalExtended": "Total amount owed for additional overtime",
      "contractHourlyRateMinusPayslipRateExtended": "contract.hourly_rate - payslip.hourly_rate = Difference per hour",
      "attendanceRegularHoursExtended": "attendance.regular_hours = Hours to calculate",
      "totalAmountOwedForRegularHoursExtended": "Total amount owed for regular hours",
      "contractDailyRateMinusPayslipDailyRateExtended": "contract.daily_rate - payslip.daily_rate = Difference per day",
      "attendanceVacationDaysExtended": "attendance.vacation_days = Days to calculate",
      "totalAmountOwedForVacationDaysExtended": "Total amount owed for vacation days",
      "employeesMustReceive125": "Employees must receive 125% of regular rate for first 2 overtime hours",
      "employeesMustReceive150": "Employees must receive 150% of regular rate for additional overtime hours",
      "employeesMustReceiveMinimumWage": "Employees must receive at least minimum wage for every hour worked",
      "employeesMustReceiveVacationPay": "Employees must receive regular daily rate for vacation days taken",
      "currentDateRange": "Current date range",
      "tier2AdditionalHours150Rate": "Tier 2: Additional Hours (150% Rate)",
      "theyShouldGet3070": "They should get at least ₪30.70/hour (minimum wage), but only got ₪18.00/hour",
      "theyShouldGet500": "They should get ₪500/day for vacation, but only got ₪400/day",
      "correctRate3750": "Correct rate: ₪30 × 1.25 = ₪37.50",
      "actualRate35": "Actual rate: ₪35",
      "differencePerHour250": "Difference per hour: ₪37.50 - ₪35 = ₪2.50",
      "hoursToCalculateMin52": "Hours to calculate: min(5, 2) = 2",
      "totalAmountOwed250Times2": "TOTAL AMOUNT OWED: ₪2.50 × 2 = ₪5.00",
      "correctRate45": "Correct rate: ₪30 × 1.50 = ₪45.00",
      "actualRate35Tier2": "Actual rate: ₪35",
      "differencePerHour10Tier2": "Difference per hour: ₪45.00 - ₪35 = ₪10.00",
      "hoursToCalculateMax52Tier2": "Hours to calculate: max(5-2, 0) = 3",
      "totalAmountOwed10Times3Tier2": "TOTAL AMOUNT OWED: ₪10.00 × 3 = ₪30.00",
      "totalAmountOwedBothTiers": "TOTAL AMOUNT OWED: ₪5.00 + ₪30.00 = ₪35.00",
      "correctRate3070MinWage": "Correct rate: ₪30.70",
      "actualRate18MinWage": "Actual rate: ₪18",
      "differencePerHour1270MinWage": "Difference per hour: ₪30.70 - ₪18 = ₪12.70",
      "hoursToCalculate8MinWage": "Hours to calculate: 8",
      "totalAmountOwed1270Times8MinWage": "TOTAL AMOUNT OWED: ₪12.70 × 8 = ₪101.60",
      "correctRate500Vacation": "Correct rate: ₪500",
      "actualRate400Vacation": "Actual rate: ₪400",
      "differencePerDay100Vacation": "Difference per day: ₪500 - ₪400 = ₪100",
      "daysToCalculate2Vacation": "Days to calculate: 2",
      "totalAmountOwed100Times2Vacation": "TOTAL AMOUNT OWED: ₪100 × 2 = ₪200.00",
      "ruleNameFirst2Hours": "First 2 Hours Overtime (125%)",
      "ruleNameAdditionalHours": "Additional Hours Overtime (150%)",
      "ruleNameAdultMinimumWage": "Adult Minimum Wage",
      "ruleNameYouthMinimumWage": "Youth Minimum Wages",
      "ruleNameVacationYears1to4": "Vacation Pay Years 1-4",
      "ruleNameVacationYears5to9": "Vacation Pay Years 5-9",
      "descriptionFirst2Hours": "Employees must receive 125% of regular rate for first 2 overtime hours",
      "descriptionAdditionalHours": "Employees must receive 150% of regular rate for additional overtime hours",
      "descriptionAdultMinimumWage": "Employees must receive at least minimum wage for every hour worked",
      "descriptionYouthMinimumWage": "Youth employees must receive at least 70% of adult minimum wage",
      "descriptionVacationYears1to4": "Employees with 1-4 years service must receive regular daily rate for vacation days",
      "descriptionVacationYears5to9": "Employees with 5-9 years service must receive regular daily rate for vacation days",
      "formulaFirst2Hours": "(contract.hourly_rate * 1.25 - payslip.overtime_rate) * min(attendance.overtime_hours, 2)",
      "formulaAdditionalHours": "(contract.hourly_rate * 1.50 - payslip.overtime_rate) * max(attendance.overtime_hours - 2, 0)",
      "formulaAdultMinimumWage": "(contract.hourly_rate - payslip.hourly_rate) * attendance.regular_hours",
      "formulaYouthMinimumWage": "(21.49 - payslip.hourly_rate) * attendance.regular_hours",
      "formulaVacationYears1to4": "(contract.daily_rate - payslip.daily_rate) * attendance.vacation_days",
      "formulaVacationYears5to9": "(contract.daily_rate - payslip.daily_rate) * attendance.vacation_days",
      "violationMessageFirst2Hours": "Underpaid overtime premium for first 2 hours",
      "violationMessageAdditionalHours": "Underpaid overtime premium for additional hours",
      "violationMessageAdultMinimumWage": "Underpaid minimum wage for adult worker",
      "violationMessageYouthMinimumWage": "Underpaid minimum wage for youth worker",
      "violationMessageVacationYears1to4": "Vacation pay violation for years 1-4",
      "violationMessageVacationYears5to9": "Vacation pay violation for years 5-9",
      "regularTimeHours1to9": "Regular time: Hours 1-9 per day = 100% of hourly rate",
      "firstOvertimeTier": "First overtime tier: Hours 10-11 (first 2 overtime hours) = 125% of hourly rate",
      "secondOvertimeTier": "Second overtime tier: Hour 12+ (beyond 2 overtime hours) = 150% of hourly rate",
      "removesNegativeSigns": "Removes negative signs. Ensures amounts are always positive.",
      "roundsDecimalNumbers": "Rounds decimal numbers to the nearest whole number for clean money calculations.",
      "translationIfEmployeeWorked": "Translation: \"If the employee worked any overtime hours\"",
      "translationIfEmployeeWorkedMore": "Translation: \"If the employee worked more than 2 overtime hours\"",
      "translationIfEmployeeWorkedMinimum": "Translation: \"If the employee worked any regular hours\"",
      "translationIfEmployeeTookVacation": "Translation: \"If the employee took any vacation days\"",
      "differenceTimesExtraHours": "(difference) × (extra hours) = Total amount owed for additional overtime",
      "differenceTimesRegularHours": "(difference) × (regular hours) = Total amount owed for regular hours",
      "differenceTimesVacationDays": "(difference) × (vacation days) = Total amount owed for vacation days",
      "rule1First2Hours125": "Rule 1: First 2 Hours (125%)",
      "rule2AdditionalHours150": "Rule 2: Additional Hours (150%)",
      "rule1AdultMinimumWage": "Rule 1: Adult Minimum Wage",
      "rule1YouthMinimumWage": "Rule 1: Youth Minimum Wage",
      "rule1VacationYears1to4": "Rule 1: Vacation Pay Years 1-4",
      "rule1VacationYears5to9": "Rule 1: Vacation Pay Years 5-9",
      "overtimePayFirst2Hours125": "Overtime Pay - First 2 Hours (125%)",
      "overtimePayAdditionalHours150": "Overtime Pay - Additional Hours (150%)",
      "israeliLaborLawOvertime": "Israeli Labor Law - Overtime Regulations",
      "israeliLaborLawMinimumWage": "Israeli Labor Law - Minimum Wage Regulations",
      "israeliLaborLawVacation": "Israeli Labor Law - Vacation Pay Regulations",
      "violationMessageOvertimeFirst2": "Overtime rate violation for first 2 hours",
      "violationMessageOvertimeAdditional": "Overtime rate violation for additional hours",
      "violationMessageMinimumWageAdult": "Minimum wage violation for adult worker",
      "violationMessageMinimumWageYouth": "Minimum wage violation for youth worker",
      "formulaOvertimeFirst2": "(contract.hourly_rate * 1.25 - payslip.overtime_rate) * min(attendance.overtime_hours, 2)",
      "formulaOvertimeAdditional": "(contract.hourly_rate * 1.50 - payslip.overtime_rate) * max(attendance.overtime_hours - 2, 0)",
      "formulaMinimumWageAdult": "(30.70 - payslip.hourly_rate) * attendance.regular_hours",
      "formulaMinimumWageYouth": "(21.49 - payslip.hourly_rate) * attendance.regular_hours",
      "conditionOvertimeHours": "attendance.overtime_hours > 0",
      "conditionOvertimeHoursMoreThan2": "attendance.overtime_hours > 2",
      "conditionRegularHours": "attendance.regular_hours > 0",
      "conditionVacationDays": "attendance.vacation_days > 0",
      "contractHourlyRateMinusPayslipHourlyRate": "contract.hourly_rate - payslip.hourly_rate",
      "minAttendanceOvertimeHours2": "min(attendance.overtime_hours, 2)",
      "maxAttendanceOvertimeHoursMinus20": "max(attendance.overtime_hours - 2, 0)",
      "thirtySeventyMinusPayslipHourlyRate": "30.70 - payslip.hourly_rate",
      "twentyOneFortyNineMinusPayslipHourlyRate": "21.49 - payslip.hourly_rate",
      "adultWorkers18Plus": "Adult workers (18+): Must be paid at least ₪30.70 per hour",
      "youthWorkers16to18": "Youth workers (16-18): Must be paid at least ₪21.49 per hour (70% of adult minimum)",
      "apprentices": "Apprentices: Must be paid at least ₪24.56 per hour (80% of adult minimum) during training",
      "overtimeAdditionalPremiums": "Overtime: Additional premiums apply on top of minimum wage",
      "returnsSmallerOfTwoValuesCapping": "Returns the smaller of two values. Perfect for \"capping\" calculations.",
      "youthWorkerMinimumWage": "Youth Worker Minimum Wage",
      "translationIfEmployeePaidLessMinimum": "Translation: \"If the employee was paid less than minimum wage\"",
      "translationIfYouthWorkerPaidLess": "Translation: \"If youth worker was paid less than youth minimum wage\"",
      "translationIfEmployeeTookVacationDays": "Translation: \"If the employee took any vacation days\"",
      "underpaidByPerHourInThisTier": "Underpaid by ₪{amount} per hour in this tier",
      "underpaidByPerHour": "Underpaid by ₪{amount} per hour",
      "actuallyPaidPerOvertimeHour": "Actually paid per overtime hour:",
      "actuallyPaidPerHour": "Actually paid per hour:",
      "actuallyPaidPerDay": "Actually paid per day:",
      "contractHourlyRateTimes125Equals": "contract.hourly_rate × 1.25 = Required overtime rate for first 2 hours",
      "contractHourlyRateTimes150Equals": "contract.hourly_rate × 1.50 = Required overtime rate for additional hours",
      "contractHourlyRateMinusPayslipRateEquals": "contract.hourly_rate - payslip.overtime_rate = Difference per hour",
      "contractHourlyRateMinusPayslipHourlyRateEquals": "contract.hourly_rate - payslip.hourly_rate = Difference per hour",
      "contractDailyRateMinusPayslipDailyRateEquals": "contract.daily_rate - payslip.daily_rate = Difference per day",
      "thirtySeventyMinusPayslipHourlyRateEquals": "30.70 - payslip.hourly_rate = Difference per hour",
      "twentyOneFortyNineMinusPayslipHourlyRateEquals": "21.49 - payslip.hourly_rate = Difference per hour",
      "minAttendanceOvertimeHours2Equals": "min(attendance.overtime_hours, 2) = Hours to calculate",
      "maxAttendanceOvertimeHoursMinus20Equals": "max(attendance.overtime_hours - 2, 0) = Hours to calculate",
      "attendanceRegularHoursEquals": "attendance.regular_hours = Hours to calculate",
      "attendanceVacationDaysEquals": "attendance.vacation_days = Days to calculate",
      "differenceTimesHoursEquals": "(difference) × (hours) = Total amount owed",
      "differenceTimesDaysEquals": "(difference) × (days) = Total amount owed",
      "formulaOvertimeFirst2Complete": "({t.common?.contractHourlyRateTimes125 || \"contract.hourly_rate * 1.25\"} - payslip.overtime_rate) * {t.common?.minAttendanceOvertimeHours2 || \"min(attendance.overtime_hours, 2)\"}",
      "formulaOvertimeAdditionalComplete": "({t.common?.contractHourlyRateTimes150 || \"contract.hourly_rate * 1.50\"} - payslip.overtime_rate) * {t.common?.maxAttendanceOvertimeHoursMinus20 || \"max(attendance.overtime_hours - 2, 0)\"}",
      "formulaMinimumWageAdultComplete": "({t.common?.thirtySeventyMinusPayslipHourlyRate || \"30.70 - payslip.hourly_rate\"}) * {t.common?.attendanceRegularHours || \"attendance.regular_hours\"}",
      "formulaMinimumWageYouthComplete": "({t.common?.twentyOneFortyNineMinusPayslipHourlyRate || \"21.49 - payslip.hourly_rate\"}) * {t.common?.attendanceRegularHours || \"attendance.regular_hours\"}",
      "formulaVacationComplete": "({t.common?.contractDailyRateMinusPayslipDailyRate || \"contract.daily_rate - payslip.daily_rate\"}) * {t.common?.attendanceVacationDays || \"attendance.vacation_days\"}",
      "theAgreedHourlyPayRate": "The agreed hourly pay rate",
      "totalOvertimeHoursWorked": "Total overtime hours worked",
      "whatTheyWereActuallyPaidPerOvertimeHour": "What they were actually paid per overtime hour",
      "example1PaymentShortfall": "Example 1: Payment Shortfall",
      "example2NegativeHoursCorrection": "Example 2: Negative Hours Correction",
      "example1HourlyRateRounding": "Example 1: Hourly Rate Rounding",
      "example2VacationDays": "Example 2: Vacation Days",
      "shouldGet37PerHourForFirst2": "Should get ₪37.50 per hour for first 2 overtime hours",
      "all5HoursWorkedButOnlyFirst2Qualify": "All 5 hours worked, but only first 2 qualify for 125% rate",
      "owes5ForFirst2OvertimeHours": "Owes ₪5.00 for first 2 overtime hours",
      "hours345QualifyFor150Rate": "Hours 3, 4, and 5 qualify for 150% rate",
      "owes30ForAdditionalOvertimeHours": "Owes ₪30.00 for additional overtime hours",
      "employeeData": "Employee Data",
      "ageDeterminesMinimumWageRate": "Age determines minimum wage rate",
      "attendanceData": "Attendance Data",
      "payslipData": "Payslip Data",
      "whatTheyWereActuallyPaidPerHour": "What they were actually paid per hour",
      "example1YouthWorkerRate": "Example 1: Youth Worker Rate",
      "example2MaximumDeduction": "Example 2: Maximum Deduction",
      "example1MinimumWageGuarantee": "Example 1: Minimum Wage Guarantee",
      "example2PreventNegativeResults": "Example 2: Prevent Negative Results",
      "example1WageDifference": "Example 1: Wage Difference",
      "example2TotalShortfall": "Example 2: Total Shortfall",
      "example1YouthRateCalculation": "Example 1: Youth Rate Calculation",
      "example2TotalAmountOwed": "Example 2: Total Amount Owed",
      "differenceBetweenMinimumWageAndActualPay": "Difference between minimum wage and actual pay = Shortfall per hour",
      "shortfallPerHourTimesTotalRegularHours": "Shortfall per hour × total regular hours = Total shortfall",
      "totalShortfallEqualsAmountOwedToEmployee": "Total shortfall = Amount owed to employee",
      "youthMinimumWage70Percent": "Youth minimum wage: 70% of ₪30.70 = ₪21.49 per hour",
      "differenceBetweenYouthMinimumAndActualPay": "Difference between youth minimum and actual pay = Shortfall per hour",
      "totalShortfallEqualsAmountOwedToYouthWorker": "Total shortfall = Amount owed to youth worker",
      "youthWorkersGet70PercentOfAdultMinimumWage": "Youth workers get 70% of adult minimum wage",
      "totalShortfallFor8Hours": "Total shortfall for 8 hours",
      "owes2792ToYouthWorker": "Owes ₪27.92 to youth worker",
      "serviceData": "Service Data",
      "yearsOfServiceDeterminesVacationEntitlement": "Years of service determines vacation entitlement",
      "vacationData": "Vacation Data",
      "numberOfVacationDaysTaken": "Number of vacation days taken",
      "payData": "Pay Data",
      "whatTheyWereActuallyPaidForVacation": "What they were actually paid for vacation",
      "example1VacationDaysCap": "Example 1: Vacation Days Cap",
      "example2MaximumDailyRate": "Example 2: Maximum Daily Rate",
      "example1MinimumVacationPay": "Example 1: Minimum Vacation Pay",
      "example2ServiceYearsMinimum": "Example 2: Service Years Minimum",
      "example1VacationPayDifference": "Example 1: Vacation Pay Difference",
      "example2ServiceYearsDifference": "Example 2: Service Years Difference",
      "example1DailyRateCalculation": "Example 1: Daily Rate Calculation",
      "example2TotalVacationPay": "Example 2: Total Vacation Pay",
      "requiredVacationPayDailyRateTimesVacationDays": "Required vacation pay: Daily rate × vacation days taken = Total owed",
      "requiredPayMinusActualPayEqualsShortfall": "Required pay minus actual pay = Shortfall (minimum 0)",
      "shortfallAmountEqualsAmountOwedToEmployee": "Shortfall amount = Amount owed to employee",
      "eligibleDaysEitherActualDaysOrEntitlement": "Eligible days: Either actual days taken OR 14 (entitlement for years 1-4), whichever is smaller",
      "requiredPayDailyRateTimesEligibleDays": "Required pay: Daily rate × eligible days = Total owed for eligible days",
      "shortfallEqualsAmountOwedForEligibleVacationDays": "Shortfall = Amount owed for eligible vacation days",
      "vacationDaysTaken5Days": "Vacation days taken: 5 days",
      "shouldGet240PerDayFor5Days": "Should get ₪240 per day for 5 days",
      "ensurePositiveResult": "Ensure positive result",
      "owes200ForVacationPay": "Owes ₪200.00 for vacation pay",
      "alwaysTestYourRule": "Always test your rule using the \"Test Rule\" button above with sample data",
      "breakComplexLawsIntoSimpleRules": "Break complex laws into simple rules - one rule per overtime tier",
      "useFunctionsStrategically": "Use functions strategically - min() prevents overpayment, max() handles negative numbers",
      "thinkInTermsOfShouldGetVsActuallyGot": "Think in terms of \"should get vs actually got\" - that's the core of every calculation",
      "startSimple": "Start simple - create basic rules first, then add complexity as you learn",
      "didEmployeeGetPaidMinimumWageForAgeGroup": "Did the employee get paid at least the minimum wage for their age group for all regular hours worked?",
      "didYouthWorkerGetPaidMinimumWage": "Did the youth worker (16-18) get paid at least 70% of minimum wage for all regular hours worked?",
      "years1To4VacationDays": "Years 1-4: 14 vacation days per year",
      "years5To9VacationDays": "Years 5-9: 16 vacation days per year",
      "years10To14VacationDays": "Years 10-14: 18 vacation days per year",
      "years15To19VacationDays": "Years 15-19: 20 vacation days per year",
      "years20PlusVacationDays": "Years 20+: 22 vacation days per year",
      "didEmployeeGetPaidRegularDailyRateForVacation": "Did the employee get paid their regular daily rate for each vacation day taken?",
      "didEmployeeTakeMoreVacationDaysThanEntitled": "Did the employee take more vacation days than they're entitled to based on their years of service?",
      "israeliLaborLawMinimumWageRegulations": "Israeli Labor Law - Minimum Wage Regulations",
      "israeliLaborLawVacationPayRegulations": "Israeli Labor Law - Vacation Pay Regulations",
      "rule1AdultMinimumWage18Plus": "Rule 1: Adult Minimum Wage (18+)",
      "rule2YouthMinimumWage16to17": "Rule 2: Youth Minimum Wage (16-17)",
      "rule1Years1to4Days": "Rule 1: Years 1-4 (14 days)",
      "rule2Years5to9Days": "Rule 2: Years 5-9 (16 days)",
      "minimumWageAdultWorkers18Plus": "Minimum Wage - Adult Workers (18+)",
      "minimumWageYouthWorkers16to17": "Minimum Wage - Youth Workers (16-17)",
      "vacationPayYears1to4Days": "Vacation Pay - Years 1-4 (14 days)",
      "vacationPayYears5to9Days": "Vacation Pay - Years 5-9 (16 days)",
      "adultWorkersMustReceiveAtLeast30": "Adult workers must receive at least ₪30.70 per hour",
      "youthWorkersMustReceiveAtLeast21": "Youth workers must receive at least ₪21.49 per hour (70% of adult minimum)",
      "employeesWith1to4YearsServiceEntitledTo14Days": "Employees with 1-4 years service entitled to 14 vacation days per year",
      "employeesWith5to9YearsServiceEntitledTo16Days": "Employees with 5-9 years service entitled to 16 vacation days per year",
      "minPreventsOverpaymentCapMaximumAmounts": "prevents overpayment (cap maximum amounts)",
      "maxEnsuresMinimumAndHandlesNegativeResults": "ensures minimums and handles negative results",
      "absMakesSureMoneyAmountsAreAlwaysPositive": "makes sure money amounts are always positive",
      "roundGivesCleanWholeNumbersForMoneyCalculations": "gives clean whole numbers for money calculations",
      "youCanCombineFunctions": "You can combine functions:",
      "shouldGet45PerHourForHoursBeyond2": "Should get ₪45.00 per hour for hours beyond 2",
      "createTwoSeparateRulesOneForEachOvertimeTier": "Create Two Separate Rules - One for Each Overtime Tier:",
      "createTheseAsTwoSeparateRules": "Create these as two separate rules. The system will evaluate both when checking overtime pay compliance.",
      "regularHoursWorkedNotOvertime": "Regular hours worked (not overtime)",
      "age16Returns2149YouthRate": "Age 16 → returns 21.49 (youth rate)",
      "age20Returns3070AdultRate": "Age 20 → returns 30.70 (adult rate)",
      "deductions500MaxAllowed300Returns300": "Deductions: ₪500, Max allowed: ₪300 → returns 300",
      "deductions200MaxAllowed300Returns200": "Deductions: ₪200, Max allowed: ₪300 → returns 200",
      "paid25PerHourMax253070Equals3070MinimumWage": "Paid ₪25/hour → max(25, 30.70) = 30.70 (minimum wage)",
      "paid35PerHourMax353070Equals35ActualRate": "Paid ₪35/hour → max(35, 30.70) = 35 (actual rate)",
      "paid25PerHourWorked8hMax3070258EqualsMax456Equals456": "Paid ₪25/hour, worked 8h → max((30.70-25)*8, 0) = max(45.6, 0) = 45.6",
      "paid35PerHourWorked8hMax3070358EqualsMax344Equals0": "Paid ₪35/hour, worked 8h → max((30.70-35)*8, 0) = max(-34.4, 0) = 0",
      "paid25Abs253070EqualsAbs570Equals570": "Paid ₪25 → abs(25-30.70) = abs(-5.70) = 5.70",
      "paid35Abs353070EqualsAbs430Equals430": "Paid ₪35 → abs(35-30.70) = abs(4.30) = 4.30",
      "overpaidBy430PerHourTimes8hEqualsAbs3440Equals3440": "Overpaid by ₪4.30/hour × 8h = abs(34.40) = 34.40",
      "adultRate3070Times070Equals2149Round2149Equals21": "Adult rate ₪30.70 → 30.70 × 0.70 = 21.49 → round(21.49) = 21",
      "adultRate3070Times080Equals2456Round2456Equals25": "Adult rate ₪30.70 → 30.70 × 0.80 = 24.56 → round(24.56) = 25",
      "shortfall570PerHourTimes8hEquals4560Round4560Equals46": "Shortfall ₪5.70/hour × 8h = 45.60 → round(45.60) = 46",
      "shortfall215PerHourTimes8hEquals1720Round1720Equals17": "Shortfall ₪2.15/hour × 8h = 17.20 → round(17.20) = 17",
      "functionTipsForMinimumWage": "Function Tips for Minimum Wage:",
      "useConditionalLogicEmployeeAge18": "Use conditional logic:",
      "shortfallPerHourTimesRegularHours": "Shortfall per hour × regular hours = Total amount owed (minimum 0)",
      "employeeAge17YearsOldYouthWorker": "Employee age: 17 years old (youth worker)",
      "createTwoSeparateRulesOneForEachAgeGroup": "Create Two Separate Rules - One for Each Age Group:",
      "createTheseAsTwoSeparateRulesAgeBased": "Create these as two separate rules. The system will evaluate the appropriate rule based on the employee's age.",
      "took20DaysReturns14CappedAtEntitlement": "Took 20 days → returns 14 (capped at entitlement)",
      "took10DaysReturns10ActualDaysTaken": "Took 10 days → returns 10 (actual days taken)",
      "dailyRate350Returns300Capped": "Daily rate ₪350 → returns 300 (capped)",
      "dailyRate250Returns250ActualRate": "Daily rate ₪250 → returns 250 (actual rate)",
      "calculated200NegativeResultMax200Equals200": "Calculated: ₪200, negative result → max(200, 0) = 200",
      "calculated50NegativeResultMax50Equals0": "Calculated: -₪50, negative result → max(-50, 0) = 0",
      "service05YearsMax051Equals1Minimum1Year": "Service: 0.5 years → max(0.5, 1) = 1 (minimum 1 year)",
      "service3YearsMax31Equals3ActualService": "Service: 3 years → max(3, 1) = 3 (actual service)",
      "paid100Owed120Abs100120EqualsAbs20Equals20": "Paid ₪100, owed ₪120 → abs(100-120) = abs(-20) = 20",
      "paid130Owed120Abs130120EqualsAbs10Equals10": "Paid ₪130, owed ₪120 → abs(130-120) = abs(10) = 10",
      "service3YearsAbs35EqualsAbs2Equals2": "Service: 3 years → abs(3-5) = abs(-2) = 2",
      "service7YearsAbs75EqualsAbs2Equals2": "Service: 7 years → abs(7-5) = abs(2) = 2",
      "hourly2950Times8Equals23600Round23600Equals236": "Hourly ₪29.50 → 29.50 × 8 = 236.00 → round(236.00) = 236",
      "hourly3025Times8Equals24200Round24200Equals242": "Hourly ₪30.25 → 30.25 × 8 = 242.00 → round(242.00) = 242",
      "daily240Times5DaysEquals120000Round120000Equals1200": "Daily ₪240 × 5 days = 1200.00 → round(1200.00) = 1200",
      "daily24550Times3DaysEquals73650Round73650Equals737": "Daily ₪245.50 × 3 days = 736.50 → round(736.50) = 737",
      "functionTipsForVacationPay": "Function Tips for Vacation Pay:",
      "useConditionalLogicEmployeeYearsOfService5": "Use conditional logic:",
      "yearsOfService3YearsEntitledTo14Days": "Years of service: 3 years (entitled to 14 days)",
      "contractDailyRate24000": "Contract daily rate: ₪240.00",
      "createRulesForDifferentServicePeriods": "Create Rules for Different Service Periods:",
      "createSeparateRulesForEachServicePeriod": "Create separate rules for each service period (1-4, 5-9, 10-14, 15-19, 20+). The system will evaluate the appropriate rule based on the employee's years of service.",
      "vacationEntitlementCheck": "Vacation Entitlement Check",
      "step2": "Step 2: What Data Do We Need?",
      "step3": "Step 3: Available Functions & Examples",
      "maxEnsuresMinimumWageCompliance": "ensures minimum wage compliance (prevents negative results)",
      "minCapsMaximumDeductionsOrLimitsCalculations": "caps maximum deductions or limits calculations",
      "absHandlesWageDifferencesRegardlessOfOverUnderPayment": "handles wage differences regardless of over/under payment",
      "roundGivesCleanWholeNumbersForFinalAmounts": "gives clean whole numbers for final amounts",
      "minCapsVacationDaysToLegalEntitlement": "caps vacation days to legal entitlement",
      "maxEnsuresMinimumPayAndPreventsNegativeResults": "ensures minimum pay and prevents negative results",
      "absHandlesPayDifferencesRegardlessOfOverUnderPayment": "handles pay differences regardless of over/under payment",
      "roundGivesCleanWholeNumbersForDailyRatesAndTotals": "gives clean whole numbers for daily rates and totals",
      "useConditionalLogicEmployeeYearsOfServiceLessThan5": "Use conditional logic: employee.years_of_service < 5 ? 14 : 16",
      "createTheseAsTwoSeparateRulesSystemWillEvaluateAppropriateRuleBasedOnEmployeeAge": "Create these as two separate rules. The system will evaluate the appropriate rule based on the employee's age.",
      "createSeparateRulesForEachServicePeriodSystemWillEvaluateAppropriateRuleBasedOnEmployeeYearsOfService": "Create separate rules for each service period (1-4, 5-9, 10-14, 15-19, 20+). The system will evaluate the appropriate rule based on the employee's years of service.",
      "contractHourlyRate50": "Contract hourly rate:",
      "overtimeHoursWorked3": "Overtime hours worked:",
      "theyShouldGet3750": "They should get ₪37.50/hour for first 2 hours (125%) and ₪45.00/hour for additional hours (150%), but only got ₪35.00/hour for all overtime",
      "bothTiers": "Both Tiers",
      "tier1First2Hours125Rate": "Tier 1: First 2 Hours (125% Rate)",
      "regularHoursWorked8Hours": "Regular hours worked: 8 hours",
      "problemEmployeeShouldGet240Times5Equals1200ForVacationButOnlyGot1000": "Employee should get ₪240 × 5 = ₪1,200 for vacation, but only got ₪1,000",
      "requiredRateForFirst2Hours": "Required rate for first 2 hours:",
      "shortfallPerHour": "Shortfall per hour:",
      "eligibleHours": "Eligible hours:",
      "requiredMinimumWageForYouth": "Required minimum wage for youth:",
      "totalShortfallCalculation": "Total shortfall calculation:",
      "finalAmountOwed": "Final amount owed:",
      "requiredVacationPay": "Required vacation pay:",
      "shortfallCalculation": "Shortfall calculation:",
      "amountOwedForTier1": "Amount owed for Tier 1:",
      "requiredRateForAdditionalHours": "Required rate for additional hours:",
      "shortfallPerAdditionalHour": "Shortfall per additional hour:",
      "additionalHours": "Additional hours:",
      "amountOwedForTier2": "Amount owed for Tier 2:",
      "shortfallPerHourTimesRegularHoursEqualsTotalAmountOwedMinimum0": "Shortfall per hour × regular hours = Total amount owed (minimum 0)",
      "employeeAge": "Employee age:",
      "yearsOldYouthWorker": "17 years old (youth worker)",
      "actuallyPaidForVacation100000": "Actually paid for vacation: ₪1,000.00",
      "underpaidBy20000": "Underpaid by ₪200.00",
      "ensuresWeOnlyGetPositiveAmounts": "Ensures we only get positive amounts (no negative results if overpaid)",
      "perHour": "per hour",
      "perOvertimeHour": "per overtime hour",
      "hourSlash": "hour",
      "underpaidBy349PerHour": "Underpaid by ₪3.49 per hour",
      "underpaidBy250PerHourInThisTier": "Underpaid by ₪2.50 per hour in this tier",
      "underpaidBy1000PerHourInThisTier": "Underpaid by ₪10.00 per hour in this tier"
    },
    "deductions500MaxAllowed300Returns300": "Deductions: ₪500, Max allowed: ₪300 → returns 300",
    "deductions200MaxAllowed300Returns200": "Deductions: ₪200, Max allowed: ₪300 → returns 200",
    "paid100Owed120Abs100Minus120EqualsAbsMinus20Equals20": "Paid ₪100, owed ₪120 → abs(100-120) = abs(-20) = 20",
    "paid130Owed120Abs130Minus120EqualsAbs10Equals10": "Paid ₪130, owed ₪120 → abs(130-120) = abs(10) = 10",
    "paid25PerHourMax25Comma3070Equals3070MinimumWage": "Paid ₪25/hour → max(25, 30.70) = 30.70 (minimum wage)",
    "paid35PerHourMax35Comma3070Equals35ActualRate": "Paid ₪35/hour → max(35, 30.70) = 35 (actual rate)",
    "paid25PerHourWorked8hMax3070Minus25Times8Comma0EqualsMax456Comma0Equals456": "Paid ₪25/hour, worked 8h → max((30.70-25)*8, 0) = max(45.6, 0) = 45.6",
    "paid35PerHourWorked8hMax3070Minus35Times8Comma0EqualsMaxMinus344Comma0Equals0": "Paid ₪35/hour, worked 8h → max((30.70-35)*8, 0) = max(-34.4, 0) = 0",
    "paid25Abs25Minus3070EqualsAbsMinus570Equals570": "Paid ₪25 → abs(25-30.70) = abs(-5.70) = 5.70",
    "paid35Abs35Minus3070EqualsAbs430Equals430": "Paid ₪35 → abs(35-30.70) = abs(4.30) = 4.30",
    "overpaidBy430PerHourTimes8hEqualsAbs3440Equals3440": "Overpaid by ₪4.30/hour × 8h = abs(34.40) = 34.40",
    "took20DaysReturns14CappedAtEntitlement": "Took 20 days → returns 14 (capped at entitlement)",
    "took10DaysReturns10ActualDaysTaken": "Took 10 days → returns 10 (actual days taken)",
    "dailyRate350Returns300Capped": "Daily rate ₪350 → returns 300 (capped)",
    "dailyRate250Returns250ActualRate": "Daily rate ₪250 → returns 250 (actual rate)",
    "calculated200NegativeResultMax200Comma0Equals200": "Calculated: ₪200, negative result → max(200, 0) = 200",
    "calculatedMinus50NegativeResultMaxMinus50Comma0Equals0": "Calculated: -₪50, negative result → max(-50, 0) = 0",
    "service05YearsMax05Comma1Equals1Minimum1Year": "Service: 0.5 years → max(0.5, 1) = 1 (minimum 1 year)",
    "service3YearsMax3Comma1Equals3ActualService": "Service: 3 years → max(3, 1) = 3 (actual service)",
    "service3YearsAbs3Minus5EqualsAbsMinus2Equals2": "Service: 3 years → abs(3-5) = abs(-2) = 2",
    "service7YearsAbs7Minus5EqualsAbs2Equals2": "Service: 7 years → abs(7-5) = abs(2) = 2",
    "hourly2950Times8Equals23600Round23600Equals236": "Hourly ₪29.50 → 29.50 × 8 = 236.00 → round(236.00) = 236",
    "hourly3025Times8Equals24200Round24200Equals242": "Hourly ₪30.25 → 30.25 × 8 = 242.00 → round(242.00) = 242",
    "daily240Times5DaysEquals120000Round120000Equals1200": "Daily ₪240 × 5 days = 1200.00 → round(1200.00) = 1200",
    "daily24550Times3DaysEquals73650Round73650Equals737": "Daily ₪245.50 × 3 days = 736.50 → round(736.50) = 737",
    "shortfall570PerHourTimes8hEquals4560Round4560Equals46": "Shortfall ₪5.70/hour × 8h = 45.60 → round(45.60) = 46",
    "shortfall215PerHourTimes8hEquals1720Round1720Equals17": "Shortfall ₪2.15/hour × 8h = 17.20 → round(17.20) = 17",
    "adultRate3070Times070Equals2149Round2149Equals21": "Adult rate ₪30.70 → 30.70 × 0.70 = 21.49 → round(21.49) = 21",
    "adultRate3070Times080Equals2456Round2456Equals25": "Adult rate ₪30.70 → 30.70 × 0.80 = 24.56 → round(24.56) = 25",
    "underpaidBy570PerHourTimes8hEqualsAbsMinus4560Equals4560": "Underpaid by ₪5.70/hour × 8h = abs(-45.60) = 45.60",
    "fivePoint2YearsServiceTimes15Equals78Round78Equals8Days": "5.2 years service → 5.2 × 1.5 = 7.8 → round(7.8) = 8 days",
    "threePoint7YearsServiceTimes15Equals555Round555Equals6Days": "3.7 years service → 3.7 × 1.5 = 5.55 → round(5.55) = 6 days",
    "baseRate2950Times125Equals36875Round36875Equals37": "Base rate ₪29.50 → 29.50 × 1.25 = 36.875 → round(36.875) = 37",
    "baseRate3000Times125Equals375Round375Equals38": "Base rate ₪30.00 → 30.00 × 1.25 = 37.5 → round(37.5) = 38",
    "adjustedHoursMinus2AbsMinus2Equals2PositiveHours": "Adjusted hours: -2 → abs(-2) = 2 (positive hours)",
    "adjustedHours3Abs3Equals3AlreadyPositive": "Adjusted hours: 3 → abs(3) = 3 (already positive)",
    "nineHoursAtRegularPay": "9 hours at regular pay",
    "twoHoursAt125PercentPayOvertimePremium": "2 hours at 125% pay (overtime premium)",
    "overtimePayAdditionalHours150": "Overtime Pay - Additional Hours (150%)",
    "employeesMustReceive150PercentOfRegularRateForOvertimeHoursBeyondFirst2": "Employees must receive 150% of regular rate for overtime hours beyond the first 2",
    "contractHourlyRate": "contract.hourly_rate",
    "attendanceOvertimeHours": "attendance.overtime_hours",
    "payslipOvertimeRate": "payslip.overtime_rate",
    "attendanceOvertimeHoursGreaterThan2": "attendance.overtime_hours > 2",
    "roundContractHourlyRateTimes8": "round(contract.hourly_rate * 8)",
    "thirtySevenPointFiveMinusPayslipOvertimeRate": "37.50 - payslip.overtime_rate",
    "fortyFivePointZeroMinusPayslipOvertimeRate": "45.00 - payslip.overtime_rate",
    "minEmployeeAge18LessThan18QuestionMark2149Colon3070": "min(employee.age, 18) < 18 ? 21.49 : 30.70",
    "employeeAgeLessThan18QuestionMark2149Colon3070": "employee.age < 18 ? 21.49 : 30.70",
    "employeeAgeLessThan18AndPayslipHourlyRateLessThan2149": "employee.age < 18 AND payslip.hourly_rate < 21.49",
    "employeeAgeGreaterThanOrEqual18AndPayslipHourlyRateLessThan3070": "employee.age >= 18 AND payslip.hourly_rate < 30.70",
    "attendanceRegularHours": "attendance.regular_hours",
    "max3070MinusPayslipHourlyRateTimesAttendanceRegularHoursComma0": "max((30.70 - payslip.hourly_rate) * attendance.regular_hours, 0)",
    "abs3070MinusPayslipHourlyRateTimesAttendanceRegularHours": "abs((30.70 - payslip.hourly_rate) * attendance.regular_hours)",
    "round3070MinusPayslipHourlyRateTimesAttendanceRegularHours": "round((30.70 - payslip.hourly_rate) * attendance.regular_hours)",
    "thirtyPointSevenZeroMinusPayslipHourlyRateTimesAttendanceRegularHours": "(30.70 - payslip.hourly_rate) * attendance.regular_hours",
    "max2149MinusPayslipHourlyRateTimesAttendanceRegularHoursComma0": "max((21.49 - payslip.hourly_rate) * attendance.regular_hours, 0)",
    "twentyOnePointFourNineMinusPayslipHourlyRateTimesAttendanceRegularHours": "(21.49 - payslip.hourly_rate) * attendance.regular_hours",
    "payslipHourlyRate": "payslip.hourly_rate",
    "maxPayslipHourlyRateComma30": "max(payslip.hourly_rate, 30)",
    "maxPayslipHourlyRateComma3070": "max(payslip.hourly_rate, 30.70)",
    "absPayslipHourlyRateMinus3070": "abs(payslip.hourly_rate - 30.70)",
    "payslipHourlyRateLessThan3070": "payslip.hourly_rate < 30.70",
    "thirtyPointSevenZeroMinusPayslipHourlyRate": "30.70 - payslip.hourly_rate",
    "twentyOnePointFourNineMinusPayslipHourlyRate": "21.49 - payslip.hourly_rate",
    "contractDailyRate": "contract.daily_rate",
    "minContractDailyRateComma300": "min(contract.daily_rate, 300)",
    "maxContractDailyRateTimesPayslipVacationDaysTakenComma0": "max(contract.daily_rate * payslip.vacation_days_taken, 0)",
    "absPayslipVacationPayMinusContractDailyRateTimesPayslipVacationDaysTaken": "abs(payslip.vacation_pay - contract.daily_rate * payslip.vacation_days_taken)",
    "roundContractDailyRateTimesPayslipVacationDaysTaken": "round(contract.daily_rate * payslip.vacation_days_taken)",
    "maxContractDailyRateTimesPayslipVacationDaysTakenMinusPayslipVacationPayComma0": "max((contract.daily_rate * payslip.vacation_days_taken) - payslip.vacation_pay, 0)",
    "contractDailyRateTimesPayslipVacationDaysTaken": "contract.daily_rate * payslip.vacation_days_taken",
    "contractDailyRateTimesPayslipVacationDaysTakenMinusPayslipVacationPay": "(contract.daily_rate * payslip.vacation_days_taken) - payslip.vacation_pay",
    "maxContractDailyRateTimesMinPayslipVacationDaysTakenComma14MinusPayslipVacationPayComma0": "max((contract.daily_rate * min(payslip.vacation_days_taken, 14)) - payslip.vacation_pay, 0)",
    "contractDailyRateTimesMinPayslipVacationDaysTakenComma14": "contract.daily_rate * min(payslip.vacation_days_taken, 14)",
    "maxContractDailyRateTimesMinPayslipVacationDaysTakenComma16MinusPayslipVacationPayComma0": "max((contract.daily_rate * min(payslip.vacation_days_taken, 16)) - payslip.vacation_pay, 0)"
  }
}